import logging
import sqlite3
import aiogram.utils.exceptions
import aiogram.utils.markdown as md
import asyncio
from aiogram.types import (ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton,
						   InlineKeyboardButton, InlineKeyboardMarkup)
from contextlib import suppress
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.exceptions import (MessageToEditNotFound, MessageCantBeEdited, MessageCantBeDeleted,
                                      MessageToDeleteNotFound)
import fix_file
import secrets
import string

# –ê–ü–ò –¢–û–ö–ï–ù
API_TOKEN = '6657499730:AAGl0n6cbpu5PQN832IW137RCjEou-YUr0U'

# –ë–î - –æ—Å–Ω–æ–≤–Ω–∞—è
conn_u = sqlite3.connect("events.db")
c_u = conn_u.cursor()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ø–æ–¥–∫–ª—é—á–∞–µ–º –±–æ—Ç–∞
bot = Bot(token = API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

def generate_alphanum_crypt_string(length):
    letters_and_digits = string.ascii_letters + string.digits
    crypt_rand_string = ''.join(secrets.choice(letters_and_digits) for i in range(length))
    return crypt_rand_string

# –°–µ–∫—Ä–µ—Ç-—Å–ª–æ–≤–æ –∏–ª–∏ —Å–µ–∫—Ä–µ—Ç-—Ñ—Ä–∞–∑–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∫–∏
@dp.message_handler(lambda message: message.text.lower() == '–∞–¥–º–∏–Ω–∞–º–∏ –Ω–µ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è - –∞–¥–º–∏–Ω–∞–º–∏ —Ä–æ–∂–¥–∞—é—Ç—Å—è!' and message.chat.type == 'private')
async def Russia_become_the_admin(message: types.Message):
	gr = c_u.execute('select groups from admins').fetchall()
	if gr == []:
		gr = 'group_1'
	else:
		gr1 = sorted([int(x[0].split('_')[1]) for x in c_u.execute('select groups from admins').fetchall()])
		gr = 'group_' + str(gr1[-1]+1)
	if c_u.execute('select * from admins where tgID=?', (message.from_user.id, )).fetchone() is None:
		c_u.execute('insert into admins (groups, tgID) values ("{}", {})'.format(gr, message.from_user.id))
		conn_u.commit()
		await message.answer('–û –í–µ–ª–∏–∫–∏–π –∞–¥–º–∏–Ω, –ø—Ä–µ–º–Ω–æ–≥–æ –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏!')
		if c_u.execute('select * from parents where tgID=? and nickname=? and username=?', (message.from_user.id, message.from_user.first_name, "@"+message.from_user.username)).fetchone() is None:
			c_u.execute('INSERT INTO parents (groups, tgID, last_name, first_name, groupID, organisator, nickname, username) '
						'VALUES ("{}", {}, "{}", "{}", {}, "{}", "{}", "{}")'
						''.format(gr, message.from_user.id, 'None', 'None', 0, 'True', message.from_user.first_name, "@"+message.from_user.username))
			conn_u.commit()
		else:
			q = c_u.execute('select * from parents where tgID=?', (message.from_user.id,)).fetchall()
			for i in q:
				c_u.execute('INSERT INTO parents (groups, tgID, last_name, first_name, groupID, organisator, nickname, username) '
					'VALUES ("{}", {}, "{}", "{}", {}, "{}", "{}", "{}")'
					''.format(gr, message.from_user.id, i[2], i[3], i[4], 'True', message.from_user.first_name, "@" + message.from_user.username))
				conn_u.commit()

		kb = InlineKeyboardMarkup()
		ready = InlineKeyboardButton(text = '–ì–æ—Ç–æ–≤(–∞)‚úÖ', callback_data = 'Ready_for_register')
		await message.answer(
							   text = '–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –±—É–¥–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è. –ö–∞–∫ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º "–ì–æ—Ç–æ–≤(–∞)"!',
							   reply_markup = kb.add(ready))
	else:
		await message.answer('–û –í–µ–ª–∏–∫–∏–π –∞–¥–º–∏–Ω, –∫–∞–∫ –±—ã –Ω–∏ –±—ã–ª–æ –ø—Ä–∏—Å–∫–æ—Ä–±–Ω–æ, –Ω–æ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–æ–º –¥–≤–∞–∂–¥—ã!')

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
class Params_event(StatesGroup):
	choosing_name_event = State()
	mes1 = State()
	choosing_date = State()
	mes2 = State()
	choosing_sum = State()
	mes3 = State()
	choosing_whom = State()
	mes4 = State()


# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª–µ–π
class FIO(StatesGroup):
	mes = State()
	f = State()
	i = State()

# C–∫—Ä–∏–Ω—ã-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
class UploadPhotoForm(StatesGroup):
    photo = State()
    mer = State()
    dat = State()
    org = State()
    summ = State()
    grps = State()

# –ò–°–ü–†–ê–í–ò–¢–¨ –í–û–ó–ú–û–ñ–ù–û–ï –û–¢–°–£–¢–°–¢–í–ò–ï USERNAME!
# –†–µ–∞–∫—Ü–∏—è –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
@dp.message_handler(content_types = ['new_chat_members'])
async def send_welcome(message: types.Message):
	kb = InlineKeyboardMarkup()
	reg = InlineKeyboardButton('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è‚úÖ', callback_data = 'rgstr')
	org = InlineKeyboardButton('–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ãüõÇ', callback_data = 'organisators')
	bot_obj = await bot.get_me()
	bot_id = bot_obj.id
	for chat_member in message.new_chat_members:
		if chat_member.id == bot_id:
			# —Ñ–∏–∫—Å–∞–Ω—É—Ç—å —á—Ç–æ –±–æ—Ç–∞ –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω
			gr = c_u.execute('select groups from admins where tgID=?', (message.from_user.id,)).fetchone()[0]
			q = """INSERT INTO groups (groups, groupID, groupTitle) VALUES ('{}', {}, '{}') """
			c_u.execute(q.format(gr, message.chat.id, message.chat.title))
			conn_u.commit()


			_users = await fix_file.vecher_v_hatu(message.chat.id)
			for us in _users:
				exist_parent = c_u.execute('select * from parents where tgID=?', (us[0],)).fetchone()

				if exist_parent is not None:

					if c_u.execute('select * from parents where groups=? and tgID=? and groupID=?', (gr, us[0], message.chat.id)).fetchone() is None:
						try:
							if c_u.execute('select groupID from parents where groups=? and tgID=?', (gr, us[0],)).fetchone()[0] == 0:
								c_u.execute('update parents set groupID=? where groups=? and tgID=?', (message.chat.id, gr, us[0],))
								conn_u.commit()
							else:
								if 'True' in [x[0] for x in c_u.execute('select organisator from parents where tgID=?', (us[0],)).fetchall()]:
									no_org = set(c_u.execute('select groups from parents where groupID=?',
															 (message.chat.id,)).fetchall())
									for nrg in no_org:
										q2 = c_u.execute(
											'insert into parents (groups, tgID, last_name, first_name, groupID, organisator, nickname, username) '
											'values ("{}", {}, "{}", "{}", {}, "{}", "{}", "{}")'.format(nrg[0], us[0],
																										 exist_parent[
																											 2],
																										 exist_parent[
																											 3],
																										 message.chat.id,
																										 "False", us[1],
																										 us[2]))
										conn_u.commit()

									grr = c_u.execute('select groups from admins where tgID=?', (us[0],)).fetchone()[0]
									q2 = c_u.execute(
										'insert into parents (groups, tgID, last_name, first_name, groupID, organisator, nickname, username) '
										'values ("{}", {}, "{}", "{}", {}, "{}", "{}", "{}")'.format(grr, us[0],
																									 exist_parent[2],
																									 exist_parent[3],
																									 message.chat.id,
																									 "True", us[1],
																									 us[2]))
									conn_u.commit()
									q4 = c_u.execute(
										'insert into groups (groups, groupID, groupTitle) '
										'values ("{}", {}, "{}")'.format(grr, message.chat.id, message.chat.title, ))
									conn_u.commit()

						except TypeError:
							no_org = set(c_u.execute('select groups from parents where groupID=?',
													 (message.chat.id,)).fetchall())
							for nrg in no_org:
								q2 = c_u.execute(
									'insert into parents (groups, tgID, last_name, first_name, groupID, organisator, nickname, username) '
									'values ("{}", {}, "{}", "{}", {}, "{}", "{}", "{}")'.format(nrg[0], us[0],
																								 exist_parent[2],
																								 exist_parent[3],
																								 message.chat.id,
																								 "False", us[1],
																								 us[2]))
								conn_u.commit()



				else:
					if c_u.execute('select * from parents where groups=? and tgID=? and username=? and nickname=? and groupID=?', (gr, us[0], us[2], us[1], message.chat.id)).fetchone() is None:

						q2 = c_u.execute('insert into parents (groups, tgID, last_name, first_name, groupID, organisator, nickname, username) '
										 'values ("{}", {}, "{}", "{}", {}, "{}", "{}", "{}")'.format(gr, us[0], 'None', 'None', message.chat.id, "False", us[1], us[2]))
						conn_u.commit()

			await message.answer(f'üö©–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, —É—á–∞—Å—Ç–Ω–∏–∫–∏ –±–µ—Å–µ–¥—ã "{message.chat.title}"!üëã\n\n'
								 f'–Ø –±–æ—Çü§ñ, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –ï—Å–ª–∏ –º–µ–Ω—è –¥–æ–±–∞–≤–∏–ª–∏ —Å—é–¥–∞, '
								 f'–∑–Ω–∞—á–∏—Ç –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —ç—Ç–æ–π –±–µ—Å–µ–¥—ã —Ö–æ—Ç—è—Ç —É–ø—Ä–æ—Å—Ç–∏—Ç—å —Å–µ–±–µ –∂–∏–∑–Ω—å, –¥–ª—è —á–µ–≥–æ –∏–º–µ–Ω–Ω–æ —è –∏ –±—ã–ª —Å–æ–∑–¥–∞–Ω!\n\n'
								 f'–ï—Å–ª–∏ –≤—ã –±—É–¥–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö, –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π:\n\n'
								 f'1Ô∏è‚É£) –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—è, –∑–∞–π–¥—è –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ –º–Ω–æ–π(–µ—Å–ª–∏ –≤—ã –µ—â–µ —ç—Ç–æ–≥–æ –Ω–µ –¥–µ–ª–∞–ª–∏).\n'
								 f'2Ô∏è‚É£) –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –ø–æ–¥ –¥–∞–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è‚úÖ" –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è –≤–∞—Å –º–æ–≥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å.\n'
								 f'3Ô∏è‚É£) –ü–æ—Å–ª–µ —á–µ–≥–æ —è –Ω–∞–ø–∏—à—É –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –≥–¥–µ –≤—ã –∑–∞–∫–æ–Ω—á–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ.\n\n'
								 f'–î–µ–ª–∞–µ—Ç—Å—è —ç—Ç–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –±—ã–ª–æ –ø—Ä–æ—â–µ: –ø–æ–Ω–∏–º–∞—Ç—å, –∫—Ç–æ —É—á–∞—Å—Ç–≤—É–µ—Ç, –æ–ø–ª–∞—Ç–∏–ª –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∏–º–∏.\n'
								 f'–ï—Å–ª–∏ –∂–µ –≤—ã —É–∂–µ –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–∞–∂–∏–º–∞–ª–∏ –¥–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –Ω–æ –¥–µ–ª–∞–ª–∏ —ç—Ç–æ –≤ –¥—Ä—É–≥–æ–π –±–µ—Å–µ–¥–µ, –ø—Ä–∏ —ç—Ç–æ–º —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å —É—á–∞—Å—Ç–∏–µ –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã, –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –±–µ–∑ —Å—Ç—Ä–∞—Ö–∞ –Ω–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É! üö©',
								 reply_markup = kb.add(reg, org))
		else:
			_users = await fix_file.vecher_v_hatu(message.chat.id)
			gr2 = c_u.execute('select groups from groups where groupID=?', (message.chat.id,)).fetchall()
			for grps in gr2:
				for us in _users:
					exist_parent = c_u.execute('select * from parents where tgID=?', (us[0],)).fetchone()
					if exist_parent is not None:

						if c_u.execute('select * from parents where groups=? and tgID=? and username=? and nickname=? and groupID=?', (grps[0], us[0], us[2], us[1], message.chat.id)).fetchone() is None:
							if 'True' in [x[0] for x in c_u.execute('select organisator from parents where tgID=?', (us[0],)).fetchall()]:
								no_org = set(c_u.execute('select groups from parents where groupID=?', (message.chat.id,)).fetchall())
								for nrg in no_org:
									q2 = c_u.execute(
										'insert into parents (groups, tgID, last_name, first_name, groupID, organisator, nickname, username) '
										'values ("{}", {}, "{}", "{}", {}, "{}", "{}", "{}")'.format(nrg[0], us[0],
																									 exist_parent[2],
																									 exist_parent[3],
																									 message.chat.id,
																									 "False", us[1],
																									 us[2]))
									conn_u.commit()

								grr = c_u.execute('select groups from admins where tgID=?', (us[0],)).fetchone()[0]
								q2 = c_u.execute(
									'insert into parents (groups, tgID, last_name, first_name, groupID, organisator, nickname, username) '
									'values ("{}", {}, "{}", "{}", {}, "{}", "{}", "{}")'.format(grr, us[0],
																								 exist_parent[2],
																								 exist_parent[3],
																								 message.chat.id,
																								 "True", us[1],
																								 us[2]))
								conn_u.commit()
								q4 = c_u.execute(
									'insert into groups (groups, groupID, groupTitle) '
									'values ("{}", {}, "{}")'.format(grr, message.chat.id, message.chat.title,))
								conn_u.commit()


							else:
								no_org = set(c_u.execute('select groups from parents where groupID=?',
														 (message.chat.id,)).fetchall())
								for nrg in no_org:
									q2 = c_u.execute(
										'insert into parents (groups, tgID, last_name, first_name, groupID, organisator, nickname, username) '
										'values ("{}", {}, "{}", "{}", {}, "{}", "{}", "{}")'.format(nrg[0], us[0],
																									 exist_parent[2],
																									 exist_parent[3],
																									 message.chat.id,
																									 "False", us[1],
																									 us[2]))
									conn_u.commit()
					else:

						no_org = set(c_u.execute('select groups from parents where groupID=?', (message.chat.id,)).fetchall())
						for nrg in no_org:
							q2 = c_u.execute(
								'insert into parents (groups, tgID, last_name, first_name, groupID, organisator, nickname, username) '
								'values ("{}", {}, "{}", "{}", {}, "{}", "{}", "{}")'.format(nrg[0], us[0],
																							 'None',
																							 'None',
																							 message.chat.id,
																							 "False", us[1],
																							 us[2]))
							conn_u.commit()

						await message.reply(f'{us[2]}\n\n'
											 f'üö© –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, {us[1]}, –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫, –±–µ—Å–µ–¥—ã "{message.chat.title}"!üëã\n'
											 f'–Ø –±–æ—Çü§ñ, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –æ–¥–Ω–∏–º –∏–∑ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤ —ç—Ç–æ–π –±–µ—Å–µ–¥—ã!\n'
											 f'–ï—Å–ª–∏ –≤—ã –±—É–¥–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö, –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π:\n\n'
											 f'1Ô∏è‚É£) –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—è, –∑–∞–π–¥—è –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ –º–Ω–æ–π(–µ—Å–ª–∏ –≤—ã –µ—â–µ —ç—Ç–æ–≥–æ –Ω–µ –¥–µ–ª–∞–ª–∏).\n'
											 f'2Ô∏è‚É£) –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –ø–æ–¥ –¥–∞–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è‚úÖ" –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è –≤–∞—Å –º–æ–≥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å.\n'
											 f'3Ô∏è‚É£) –ü–æ—Å–ª–µ —á–µ–≥–æ —è –Ω–∞–ø–∏—à—É –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –≥–¥–µ –≤—ã –∑–∞–∫–æ–Ω—á–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ.\n\n'
											 f'–î–µ–ª–∞–µ—Ç—Å—è —ç—Ç–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –±—ã–ª–æ –ø—Ä–æ—â–µ: –ø–æ–Ω–∏–º–∞—Ç—å, –∫—Ç–æ —É—á–∞—Å—Ç–≤—É–µ—Ç, –æ–ø–ª–∞—Ç–∏–ª –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∏–º–∏.\n'
											 f'–ï—Å–ª–∏ –∂–µ –≤—ã —É–∂–µ –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–∞–∂–∏–º–∞–ª–∏ –¥–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –Ω–æ –¥–µ–ª–∞–ª–∏ —ç—Ç–æ –≤ –¥—Ä—É–≥–æ–π –±–µ—Å–µ–¥–µ, –ø—Ä–∏ —ç—Ç–æ–º —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å —É—á–∞—Å—Ç–∏–µ –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã, –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –±–µ–∑ —Å—Ç—Ä–∞—Ö–∞ –Ω–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É! üö©',
											 reply_markup = kb.add(reg, org))

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –±–æ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@dp.message_handler(lambda message: message.text.lower() == '/register' and message.chat.type == 'private')
async def register_command(message: types.Message):
	kb = InlineKeyboardMarkup()
	ready = InlineKeyboardButton(text = '–ì–æ—Ç–æ–≤(–∞)', callback_data = 'Ready_for_register')
	await message.answer('–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –±—É–¥–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ—ë –ò–º—è, –§–∞–º–∏–ª–∏—é –∏ –û—Ç—á–µ—Å—Ç–≤–æ. –≠—Ç–æ –≤—Å—ë, —á—Ç–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è. –ö–∞–∫ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º "–ì–æ—Ç–æ–≤(–∞)"!', reply_markup = kb.add(ready))

# —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–∑ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.callback_query_handler(lambda call: call.data == 'rgstr')
async def register_from_start_message(callback_query: types.CallbackQuery, state: FSMContext):
	grID = callback_query.chat.id
	gr = c_u.execute('select groups from groups where groupID=?', (grID, )).fetchone()[0]
	q1 = """INSERT INTO parents (groups, tgID, last_name, first_name, groupID, organisator, nickname, username) VALUES ('{}', {}, '{}', '{}', {}, '{}', '{}', '{}')"""
	c_u.execute(q1.format(gr, callback_query.from_user.id, None, None, grID, 'False', callback_query.from_user.first_name, callback_query.from_user.username))
	conn_u.commit()
	kb = InlineKeyboardMarkup()
	ready = InlineKeyboardButton(text = '–ì–æ—Ç–æ–≤(–∞)', callback_data = 'Ready_for_register')
	try:
		await bot.send_message(chat_id = callback_query.from_user.id, text = '–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –±—É–¥–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ—ë –§–∞–º–∏–ª–∏—é –∏ –ò–º—è. –≠—Ç–æ –≤—Å—ë, —á—Ç–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è. –ö–∞–∫ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º "–ì–æ—Ç–æ–≤(–∞)"!', reply_markup = kb.add(ready))
	except:
		await callback_query.answer('–î–ª—è –Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–π –º–µ–Ω—è!')

# –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –≥–æ—Ç–æ–≤ –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–Ω–∞–∂–∞–º–∞–ª –∫–Ω–æ–ø–∫—É –Ω–µ–≤–µ—Ä–Ω–æ–µ –§–ò–û
@dp.callback_query_handler(lambda call: call.data == 'Ready_for_register')
async def ready_for_register(callback_query: types.CallbackQuery, state: FSMContext):
	asyncio.create_task(delete_message(callback_query.message, 0))
	await bot.send_message(chat_id = callback_query.from_user.id, text = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ—é –§–∞–º–∏–ª–∏—é!')

	await state.set_state(FIO.f)

# –§–∞–º–∏–ª–∏—è
@dp.message_handler(state = FIO.f)
async def get_f_parent(message: types.Message, state: FSMContext):
	await state.update_data(familia = message.text.title())

	await message.answer(f'–í–∞—à–∞ –§–∞–º–∏–ª–∏—è: {message.text.title()}\n'
						 f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ—ë –ò–º—è!')

	await state.set_state(FIO.i)

# –ò–º—è
@dp.message_handler(state = FIO.i)
async def get_i_parent(message: types.Message, state: FSMContext):
	await state.update_data(imya = message.text.title())
	user_data = await state.get_data()
	await state.finish()

	kb = InlineKeyboardMarkup()
	yep = InlineKeyboardButton('–í–µ—Ä–Ω–æ‚úÖ', callback_data = 'right_FIO')
	no = InlineKeyboardButton('–ù–µ–≤–µ—Ä–Ω–æ‚ùå', callback_data = 'Ready_for_register')
	await message.answer(f'–í–∞—à–∞ –§–∞–º–∏–ª–∏—è: {user_data["familia"]}\n'
						 f'–í–∞—à–µ –ò–º—è: {message.text.title()}\n'
						 f'–í–µ—Ä–Ω–æ –ª–∏ —É–∫–∞–∑–∞–Ω—ã –§–∞–º–∏–ª–∏—è –∏ –ò–º—è?', reply_markup = kb.add(yep, no))

# –í–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω–æ –§–ò–û
@dp.callback_query_handler(lambda call: call.data == 'right_FIO')
async def right_fio(callback_query: types.CallbackQuery, state: FSMContext):
	F = callback_query.message.text.split('\n')[0].split(': ')[1]
	I = callback_query.message.text.split('\n')[1].split(': ')[1]
	c_u.execute("UPDATE parents SET last_name=?, first_name=? WHERE tgID=?", (F, I, callback_query.from_user.id))
	conn_u.commit()
	all_FIO = f'{F} {I}'
	c_u.execute("UPDATE active_events SET parent=? WHERE tgID=?", (all_FIO, callback_query.from_user.id))
	conn_u.commit()

	gr = set(c_u.execute('select groups from active_events where tgID=?', (callback_query.from_user.id,)).fetchall())
	kb = InlineKeyboardMarkup()
	my_ev = InlineKeyboardButton(text = '–ú–æ–∏ —Å–æ–±—ã—Ç–∏—è', callback_data = 'myevents')
	all_ev = InlineKeyboardButton(text = '–í—Å–µ —Å–æ–±—ã—Ç–∏—è', callback_data = 'allevents')
	change_FIO = InlineKeyboardButton(text = '–°–º–µ–Ω–∏—Ç—å –§–∞–º–∏–ª–∏—é –∏/–∏–ª–∏ –ò–º—è', callback_data = 'Ready_for_register')
	ln = 0
	for g in gr:
		ln += len(c_u.execute('select * from Event where groups=?', (g[0],)).fetchall())

	await callback_query.message.edit_text(f'–§–∞–º–∏–ª–∏—è: {F}\n'
						 f'–ò–º—è: {I}\n'
						 f'==========\n'
						 f'üÜî: {callback_query.from_user.id}\n'
						 f'–ö–æ–ª-–≤–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –≥–¥–µ –≤—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ: {len(c_u.execute("select * from active_events where tgID=? and particip=?", (callback_query.from_user.id, "True")).fetchall())}\n'
						 f'–ö–æ–ª-–≤–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–º: {ln}\n'
						 f'‚úÖ–û–ø–ª–∞—á–µ–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ: {len(c_u.execute("select * from active_events where tgID=? and paid=?", (callback_query.from_user.id, "True")).fetchall())}\n'
						 f'‚ùå–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ: {len(c_u.execute("select * from active_events where tgID=? and paid=?", (callback_query.from_user.id, "False")).fetchall())}',
						 reply_markup = kb.add(my_ev, all_ev).add(change_FIO))

# –≤—ã–≤–æ–¥ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤
@dp.callback_query_handler(lambda call: call.data == 'organisators')
async def output_organisators(callback_query: types.CallbackQuery, state: FSMContext):
	try:
		grID = callback_query.message.chat.id
		gr = set(c_u.execute('select groups from groups where groupID=?', (grID,)).fetchall())
		orgs = []
		for i in gr:
			admins_temp = c_u.execute('select tgID from admins where groups=?', (i[0],)).fetchall()
			for j in admins_temp:
				orgs.append(j[0])

		out = '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã: \n'
		cnt = 1
		for ad in orgs:
			admins = c_u.execute('select * from parents where tgID=?', (ad,)).fetchone()
			out += f'{cnt}) {admins[2]} {admins[3]} - {admins[7]}\n'
			cnt += 1

		await callback_query.message.edit_text(text = out)
	except:
		await callback_query.message.edit_text(text = '–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ')

# —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
@dp.message_handler(commands = ['start'])
async def start_command(message: types.Message):
	cht_id = str(message.chat.id)
	if cht_id[0] == '-':
		kb = InlineKeyboardMarkup()
		reg = InlineKeyboardButton('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è‚úÖ', callback_data = 'rgstr')
		org = InlineKeyboardButton('–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ãüõÇ', callback_data = 'organisators')
		await message.answer(f'üö©–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, —É—á–∞—Å—Ç–Ω–∏–∫–∏ –±–µ—Å–µ–¥—ã "{message.chat.title}"!üëã\n\n'
							 f'–Ø –±–æ—Çü§ñ [@evt_assistant_bot], —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –ï—Å–ª–∏ –º–µ–Ω—è –¥–æ–±–∞–≤–∏–ª–∏ —Å—é–¥–∞, '
							 f'–∑–Ω–∞—á–∏—Ç –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —ç—Ç–æ–π –±–µ—Å–µ–¥—ã —Ö–æ—Ç—è—Ç —É–ø—Ä–æ—Å—Ç–∏—Ç—å —Å–µ–±–µ –∂–∏–∑–Ω—å, –¥–ª—è —á–µ–≥–æ –∏–º–µ–Ω–Ω–æ —è –∏ –±—ã–ª —Å–æ–∑–¥–∞–Ω!\n\n'
							 f'–ï—Å–ª–∏ –≤—ã –±—É–¥–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö, –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π:\n\n'
							 f'1Ô∏è‚É£) –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—è, –∑–∞–π–¥—è –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ –º–Ω–æ–π(–µ—Å–ª–∏ –≤—ã –µ—â–µ —ç—Ç–æ–≥–æ –Ω–µ –¥–µ–ª–∞–ª–∏).\n'
							 f'2Ô∏è‚É£) –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –ø–æ–¥ –¥–∞–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è‚úÖ" –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è –≤–∞—Å –º–æ–≥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å.\n'
							 f'3Ô∏è‚É£) –ü–æ—Å–ª–µ —á–µ–≥–æ —è –Ω–∞–ø–∏—à—É –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –≥–¥–µ –≤—ã –∑–∞–∫–æ–Ω—á–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ.\n\n'
							 f'–î–µ–ª–∞–µ—Ç—Å—è —ç—Ç–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –±—ã–ª–æ –ø—Ä–æ—â–µ: –ø–æ–Ω–∏–º–∞—Ç—å, –∫—Ç–æ —É—á–∞—Å—Ç–≤—É–µ—Ç, –æ–ø–ª–∞—Ç–∏–ª –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∏–º–∏.\n'
							 f'–ï—Å–ª–∏ –∂–µ –≤—ã —É–∂–µ –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–∞–∂–∏–º–∞–ª–∏ –¥–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –Ω–æ –¥–µ–ª–∞–ª–∏ —ç—Ç–æ –≤ –¥—Ä—É–≥–æ–π –±–µ—Å–µ–¥–µ, –ø—Ä–∏ —ç—Ç–æ–º —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å —É—á–∞—Å—Ç–∏–µ –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã, –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –±–µ–∑ —Å—Ç—Ä–∞—Ö–∞ –Ω–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É! üö©',
							 reply_markup = kb.add(reg, org))
	else:
		await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –¢–µ–ø–µ—Ä—å —è —Å–º–æ–≥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å —Ç–µ–±—è –æ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö. "
							 "–ê –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–æ–º –∏ —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, "
							 "–∏ —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ –Ω–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø- –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É.\n"
							 "–ï—Å–ª–∏ –≤—ã –æ–±—ã—á–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫, –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ –≤–≤–µ–¥–∏—Ç–µ /register")

# —Ö–µ–ª–ø–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
@dp.message_handler(commands = ['help'])
async def help_command(message: types.Message):
	await message.reply('/add - [–î–ª—è –∞–¥–º–∏–Ω–æ–≤] –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –ø–æ—Å–ª–µ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è, –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞\n\n'
						'/events - —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–∏–µ, –Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è\n\n'
						'/myevents - –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n\n'
						'/register - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –±–æ—Ç–µ(–µ—Å–ª–∏ –≤—ã –µ—â–µ —ç—Ç–æ–≥–æ –Ω–µ –¥–µ–ª–∞–ª–∏)\n\n'
						'/profile - –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n'
						'/news - [–î–ª—è –∞–¥–º–∏–Ω–æ–≤] —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –≤–∞—à–∏–º –≥—Ä—É–ø–ø–∞–º, –ø–æ—Å–ª–µ /news —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç')

# –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@dp.message_handler(lambda message: message.text.lower() == '/add' and message.chat.type == 'private')
async def event_name(message: types.Message, state: FSMContext):
	adm = c_u.execute('select * from admins where tgID=?', (message.from_user.id,)).fetchone()
	if adm is None:
		await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã. –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–µ–∫—Ä–µ—Ç–Ω—É—é —Å–ª–æ–≤–æ/—Ñ—Ä–∞–∑—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø!')
		return
	else:
		if c_u.execute('select * from groups where groups=?', (adm[0],)).fetchone() is None:
			await message.answer('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –±–æ—Ç–∞ —Ö–æ—Ç—è –±—ã –≤ –æ–¥–Ω—É –±–µ—Å–µ–¥—É!')
			return
		else:
			ms1 = await message.answer(
				text = '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:'
			)
			await state.set_state(Params_event.mes1)
			await state.update_data(mes1 = ms1)
			await state.set_state(Params_event.choosing_name_event)

# –°—É–º–º–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@dp.message_handler(state = Params_event.choosing_name_event)
async def event_sum(message: types.Message, state: FSMContext):
	user_data = await state.get_data()
	await state.update_data(chosen_name_event = message.text.lower())
	asyncio.create_task(delete_message(message, 0))
	asyncio.create_task(delete_message(user_data['mes1'], 0))
	ms2 = await message.answer(
		text = f"–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {message.text.lower()}\n"
			   "–ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å –∫–∞–∂–¥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞:"
	)
	await state.set_state(Params_event.mes2)
	await state.update_data(mes2 = ms2)
	await state.set_state(Params_event.choosing_sum)

# –î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è --- –°–¥–µ–ª–∞—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é dd.mm.yyyy!!!!
@dp.message_handler(state = Params_event.choosing_sum)
async def event_date(message: types.Message, state: FSMContext):
	user_data = await state.get_data()
	await state.update_data(chosen_sum_event = message.text.lower())
	asyncio.create_task(delete_message(message, 0))
	asyncio.create_task(delete_message(user_data['mes2'], 0))
	ms3 = await message.answer(
		text = f"–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {user_data['chosen_name_event']}\n"
			   f"–°—É–º–º–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {message.text.lower()}\n"
			   f"–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:"

	)
	await state.set_state(Params_event.mes3)
	await state.update_data(mes3 = ms3)
	await state.set_state(Params_event.choosing_date)

# –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@dp.message_handler(state = Params_event.choosing_date)
async def event_whom(message: types.Message, state: FSMContext):
	user_data = await state.get_data()
	await state.update_data(chosen_date_event = message.text.lower())
	asyncio.create_task(delete_message(message, 0))
	asyncio.create_task(delete_message(user_data['mes3'], 0))

	ms4 = await message.answer(
		text = f"–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {user_data['chosen_name_event']}\n"
			   f"–°—É–º–º–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {user_data['chosen_sum_event']}\n"
			   f"–î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {message.text.lower()}\n"
			   f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: –Ω–∞–ø–∏—à–∏—Ç–µ '–ù–µ—Ç', –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –µ–µ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–π"

	)
	await state.set_state(Params_event.mes4)
	await state.update_data(mes4 = ms4)
	await state.set_state(Params_event.choosing_whom)

# –í—ã–≤–æ–¥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è + –∑–∞–ø–∏—Å—å –≤ –ë–î
@dp.message_handler(state = Params_event.choosing_whom)
async def event_output(message: types.Message, state: FSMContext):
	keyboard = InlineKeyboardMarkup()
	user_data = await state.get_data()
	ver = InlineKeyboardButton(text = '–í–µ—Ä–Ω–æ', callback_data = '–≤–µ—Ä–Ω–∞—è —Ñ–æ—Ä–º–∞')
	never = InlineKeyboardButton(text = '–ù–µ–≤–µ—Ä–Ω–æ', callback_data = '–Ω–µ–≤–µ—Ä–Ω–∞—è —Ñ–æ—Ä–º–∞')
	asyncio.create_task(delete_message(message, 0))
	asyncio.create_task(delete_message(user_data['mes4'], 0))
	if message.text.lower() != '–Ω–µ—Ç':

		await message.answer(
			text = f"1Ô∏è‚É£–î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {user_data['chosen_date_event']}\n"
				   f"2Ô∏è‚É£–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {user_data['chosen_name_event']}\n"
				   f"3Ô∏è‚É£–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {message.text}\n"
				   f"4Ô∏è‚É£–°—É–º–º–∞ —Å –∫–∞–∂–¥–æ–≥–æ: {user_data['chosen_sum_event']}\n",
			reply_markup = keyboard.add(ver, never)
		)

	else:
		await message.answer(
			text = f"1Ô∏è‚É£–î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {user_data['chosen_date_event']}\n"
				   f"2Ô∏è‚É£–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {user_data['chosen_name_event']}\n"
				   f"3Ô∏è‚É£–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n"
				   f"4Ô∏è‚É£–°—É–º–º–∞ —Å –∫–∞–∂–¥–æ–≥–æ: {user_data['chosen_sum_event']}\n",
			reply_markup = keyboard.add(ver, never)
		)
	await state.finish()


# –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä inline-–∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
def genmarkup(data):
	markup = InlineKeyboardMarkup()
	markup.row_width = 2
	for i in data:
		namee = c_u.execute('select groupTitle from groups where groupID=?', (i[0],)).fetchone()[0]
		markup.add(InlineKeyboardButton(namee, callback_data = str(i[0])))
	return markup


@dp.callback_query_handler(lambda call: call.data == '–≤–µ—Ä–Ω–∞—è —Ñ–æ—Ä–º–∞')
async def choice_rassilka(callback_query: types.CallbackQuery, state: FSMContext):
	keyboard = InlineKeyboardMarkup()
	yeah = InlineKeyboardButton(text = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ —Ä–∞–∑–æ—Å–ª–∞—Ç—å', callback_data = '—Ö–æ—á—É_—Ä–∞–∑–æ—Å–ª–∞—Ç—å')
	await callback_query.message.edit_text(text = callback_query.message.text, reply_markup = keyboard.add(yeah))

@dp.callback_query_handler(lambda call: call.data == '–Ω–µ–≤–µ—Ä–Ω–∞—è —Ñ–æ—Ä–º–∞')
async def choice_rassilka(callback_query: types.CallbackQuery, state: FSMContext):
	keyboard = InlineKeyboardMarkup()
	no = InlineKeyboardButton(text = '–û—Ç–º–µ–Ω–∞', callback_data = 'exit')
	nono = InlineKeyboardButton(text = '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data = '–∑–∞–Ω–æ–≤–æ')
	await callback_query.message.edit_text(callback_query.message.text, reply_markup = keyboard.add(no, nono))

@dp.callback_query_handler(lambda call: call.data == '–∑–∞–Ω–æ–≤–æ')
async def choice_rassilka(callback_query: types.CallbackQuery, state: FSMContext):
	adm = c_u.execute('select * from admins where tgID=?', (callback_query.from_user.id,)).fetchone()

	ms1 = await callback_query.message.edit_text(
		text = '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:'
	)
	await state.set_state(Params_event.mes1)
	await state.update_data(mes1 = ms1)
	await state.set_state(Params_event.choosing_name_event)


# –°–æ–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É ( –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≥—Ä—É–ø–ø –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ )
@dp.callback_query_handler(lambda call: call.data == '—Ö–æ—á—É_—Ä–∞–∑–æ—Å–ª–∞—Ç—å')
async def choice_rassilka(callback_query: types.CallbackQuery):
	gr = c_u.execute('select groups from admins where tgID=?', (callback_query.from_user.id,)).fetchone()[0]
	mer = callback_query.message.text.split('\n')[1].split(': ')[1]
	dat = callback_query.message.text.split('\n')[0].split(': ')[1]
	summ = callback_query.message.text.split('\n')[3].split(': ')[1]
	org = callback_query.message.text.split('\n')[2].split(': ')[1]
	exit = InlineKeyboardButton('–ó–∞–∫—Ä—ã—Ç—å', callback_data = 'exit')
	if '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' in callback_query.message.text:

		for i in range(1000):
			rand_str = generate_alphanum_crypt_string(16)
			if c_u.execute('select * from Event where eventID=?', (rand_str,)).fetchone() is None:
				q = f"INSERT INTO 'Event' (groups, datee, namee, org, summ, tgID, eventID) VALUES ('{gr}', '{dat}', '{mer}', '{org}', {summ}, {callback_query.from_user.id}, '{rand_str}')"
				c_u.execute(q)
				conn_u.commit()
				break


	else:
		gr = c_u.execute('select groups from admins where tgID=?', (callback_query.from_user.id,)).fetchone()[0]
		for i in range(1000):
			rand_str = generate_alphanum_crypt_string(16)
			if c_u.execute('select * from Event where eventID=?', (rand_str,)).fetchone() is None:
				q = f"INSERT INTO 'Event' (groups, datee, namee, org, summ, tgID, eventID) VALUES ('{gr}', '{dat}', '{mer}', '{org}', {summ}, {callback_query.from_user.id}, '{rand_str}')"
				c_u.execute(q)
				conn_u.commit()
				break


	await callback_query.answer('–í—ã–±–∏—Ä–∞–π –∫—É–¥–∞ –æ—Ç—Å—ã–ª–∞—Ç—å')

	data = set(c_u.execute('SELECT groupID FROM parents where groups=? and tgID=?', (gr, callback_query.from_user.id)).fetchall())
	await callback_query.message.edit_text(f'{callback_query.message.text}', reply_markup = genmarkup(data).add(exit))


# –°–∞–º–∞ —Ä–∞—Å—Å—ã–ª–∫–∞
@dp.callback_query_handler(lambda call: '-' in call.data)
async def rasslka(callback_query: types.CallbackQuery):

	if callback_query.message.text.split(' ')[0] != '/news':

		adm_id = callback_query.from_user.id
		gr = c_u.execute('select groups from admins where tgID=?', (adm_id,)).fetchone()[0]

		# FIX TUTA
		if c_u.execute('select organisator from parents where tgID=?', (callback_query.from_user.id,)).fetchone()[0] == 'False':
			c_u.execute('update parents set organisator=? where tgID=?', ('True', callback_query.from_user.id,))
			conn_u.commit()
		if c_u.execute('select * from parents where groupID=? and groups=?', (callback_query.data, gr)).fetchone() is None:
			prnts = c_u.execute('select * from parents where groupID=?', (callback_query.data,)).fetchall()
			for parent in prnts:
				if c_u.execute('select * from groups where groups=? and groupID=?', (gr, parent[5])).fetchone() is None:
					namee = c_u.execute('select groupTitle from groups where groupID=?', (parent[5],)).fetchone()[0]
					c_u.execute('insert into groups (groups, groupID, groupTitle) '
								'values ("{}", {}, "{}")'.format(gr, parent[5], namee))
					conn_u.commit()

				# FIX TUTA
				if adm_id == parent[5]:
					c_u.execute('insert into parents (groups, tgID, last_name, first_name, groupID, organisator, nickname, username) '
							'values ("{}", {}, "{}", "{}", {}, "{}", "{}", "{}")'.format(gr, parent[1], parent[2], parent[3], parent[5], "True", parent[7], parent[8]))
					conn_u.commit()
				else:
					c_u.execute('insert into parents (groups, tgID, last_name, first_name, groupID, organisator, nickname, username) '
						'values ("{}", {}, "{}", "{}", {}, "{}", "{}", "{}")'.format(gr, parent[1], parent[2],parent[3], parent[5], "False", parent[7], parent[8]))
					conn_u.commit()

		await callback_query.answer('–û—Ç–ø—Ä–∞–≤–∏–ª –∫—É–¥–∞ –Ω–∞–¥–æ!')
		kb = InlineKeyboardMarkup()
		uch = InlineKeyboardButton(text = '–£—á–∞—Å—Ç–≤—É—é', callback_data = '–£—á–∞—Å—Ç–≤—É—é')
		neuch = InlineKeyboardButton(text = '–ù–µ —É—á–∞—Å—Ç–≤—É—é', callback_data = '–ù–µ —É—á–∞—Å—Ç–≤—É—é')

		try:
			await bot.send_message(chat_id = callback_query.data, text = callback_query.message.text, reply_markup = kb.add(uch, neuch))
		except aiogram.utils.exceptions.MigrateToChat as e:
			chat_ID = str(e).split(' New id: ')[1].split('.')[0].strip()
			c_u.execute('update groups set groupID=? where groupID=?', (int(chat_ID), int(callback_query.data), ))
			conn_u.commit()
			await bot.send_message(chat_id = chat_ID, text = callback_query.message.text, reply_markup = kb.add(uch, neuch))
	else:
		adm_id = callback_query.from_user.id
		gr = c_u.execute('select groups from admins where tgID=?', (adm_id,)).fetchone()[0]

		# FIX TUTA
		if c_u.execute('select organisator from parents where tgID=?', (callback_query.from_user.id,)).fetchone()[0] == 'False':
			c_u.execute('update parents set organisator=? where tgID=?', ('True', callback_query.from_user.id,))
			conn_u.commit()
		if c_u.execute('select * from parents where groupID=? and groups=?',(callback_query.data, gr)).fetchone() is None:
			prnts = c_u.execute('select * from parents where groupID=?', (callback_query.data,)).fetchall()
			for parent in prnts:
				if c_u.execute('select * from groups where groups=? and groupID=?', (gr, parent[5])).fetchone() is None:
					namee = c_u.execute('select groupTitle from groups where groupID=?', (parent[5],)).fetchone()[0]
					c_u.execute('insert into groups (groups, groupID, groupTitle) '
								'values ("{}", {}, "{}")'.format(gr, parent[5], namee))
					conn_u.commit()

				# FIX TUTA
				if adm_id == parent[5]:
					c_u.execute(
						'insert into parents (groups, tgID, last_name, first_name, groupID, organisator, nickname, username) '
						'values ("{}", {}, "{}", "{}", {}, "{}", "{}", "{}")'.format(gr, parent[1], parent[2], parent[3], parent[5], "True", parent[7], parent[8]))
					conn_u.commit()
				else:
					c_u.execute(
						'insert into parents (groups, tgID, last_name, first_name, groupID, organisator, nickname, username) '
						'values ("{}", {}, "{}", "{}", {}, "{}", "{}", "{}")'.format(gr, parent[1], parent[2], parent[3], parent[5], "False", parent[7], parent[8]))
					conn_u.commit()

		await callback_query.answer('–û—Ç–ø—Ä–∞–≤–∏–ª –∫—É–¥–∞ –Ω–∞–¥–æ!')

		try:
			fious = c_u.execute('select * from parents where tgID=?', (callback_query.from_user.id,)).fetchone()
			await bot.send_message(chat_id = callback_query.data, text = callback_query.message.text.replace('/news', '', 1) + f'\n\n–û—Ç–ø—Ä–∞–≤–∏–ª: {fious[7]}')
		except aiogram.utils.exceptions.MigrateToChat as e:
			fious = c_u.execute('select * from parents where tgID=?', (callback_query.from_user.id,)).fetchone()
			chat_ID = str(e).split(' New id: ')[1].split('.')[0].strip()
			c_u.execute('update groups set groupID=? where groupID=?', (int(chat_ID), int(callback_query.data),))
			conn_u.commit()
			await bot.send_message(chat_id = chat_ID, text = callback_query.message.text.replace('/news', '', 1) + f'\n\n–û—Ç–ø—Ä–∞–≤–∏–ª: {fious[7]}')

# –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —É—á–∞—Å—Ç–∏–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
@dp.callback_query_handler(lambda call: call.data == '–£—á–∞—Å—Ç–≤—É—é')
async def participation(callback_query: types.CallbackQuery, state: FSMContext):
	mer = callback_query.message.text.split('\n')[1].split(': ')[1]
	summ = callback_query.message.text.split('\n')[3].split(': ')[1]
	dat = callback_query.message.text.split('\n')[0].split(': ')[1]
	org = callback_query.message.text.split('\n')[2].split(': ')[1]

	# –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º
	if callback_query.message.chat.type == "private":
		gr1 = c_u.execute('select groups from Event where namee=? and summ=? and datee=? and org=?', (mer, summ, dat, org)).fetchall()
		gr = ''
		# –ø–æ–∏—Å–∫ –≤–µ—Ä–Ω–æ–π –≥—Ä—É–ø–ø—ã(–Ω–µ –±–µ—Å–µ–¥—ã)
		for i in gr1:
			adm = c_u.execute('select tgID from admins where groups=?', (i[0],)).fetchone()[0]
			if c_u.execute('select groups from Event where namee=? and datee=? and summ=? and org=? and tgID=?',(mer, dat, summ, org, adm)).fetchone()[0] == i[0]:
				gr = i[0]  # –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –Ω—É–∂–Ω–æ–π –≥—Ä—É–ø–ø—ã(–Ω–µ –±–µ—Å–µ–¥—ã)
				break
		exist_parents_in_active_events = c_u.execute('select * from active_events where groups=? and namee=? and datee=? and tgID=?',(gr, mer, dat, callback_query.from_user.id)).fetchone()
		regist_parents = c_u.execute('select * from parents where tgID=?', (callback_query.from_user.id,)).fetchone()
	# —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–µ—Å–µ–¥–∞—Ö
	else:
		gr = c_u.execute('select groups from Event where namee=? and summ=? and datee=? and org=?',(mer, summ, dat, org)).fetchone()[0]
		exist_parents_in_active_events = c_u.execute('select * from active_events where groups=? and namee=? and datee=? and tgID=? and org=?',(gr, mer, dat, callback_query.from_user.id, org)).fetchone()
		regist_parents = c_u.execute('select * from parents where tgID=?', (callback_query.from_user.id,)).fetchone()
	# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∂–∏–º–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É —É—á–∞—Å—Ç–≤–æ–≤–∞—é
	if exist_parents_in_active_events is None:
		# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –≤ –±–æ—Ç–µ
		if regist_parents[2] == 'None':

			await callback_query.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!')
		# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ
		else:

			# –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
			if int(summ) == 0:
				c_u.execute('insert into active_events '
							'(groups, tgID, namee, datee, parent, particip, paid, org, summ)'
							'values ("{}", {}, "{}", "{}", "{}", "{}", "{}", "{}", {})'
							''.format(gr, callback_query.from_user.id, mer, dat,regist_parents[2] + ' ' + regist_parents[3], 'True', 'True', org, summ))
				conn_u.commit()
			# –ø–ª–∞—Ç–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
			else:
				c_u.execute('insert into active_events '
							'(groups, tgID, namee, datee, parent, particip, paid, org, summ)'
							'values ("{}", {}, "{}", "{}", "{}", "{}", "{}", "{}", {})'
							''.format(gr, callback_query.from_user.id, mer, dat,regist_parents[2] + ' ' + regist_parents[3], 'True', 'False', org, summ))
				conn_u.commit()
			try:
				# –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ
				if int(summ) == 0:
					await bot.send_message(chat_id = callback_query.from_user.id,
										   text = f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {regist_parents[2] + " " + regist_parents[3]}üëã!\n–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ "{mer}", '
												  f'–ø—Ä–æ—Ö–æ–¥—è—â–µ–µ {dat}üóì!\n\n'
												  f'–î–∞–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤, —Ç–æ –µ—Å—Ç—å —è–≤–ª—è–µ—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º, –≤ —Å–ª–µ–¥—Å—Ç–≤–∏–µ —á–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è!')
					await callback_query.answer('–ó–∞–ø–∏—Å–∞–ª —Ç–µ–±—è –Ω–∞ –¥–∞–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ')
				# –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–ª–∞—Ç–Ω–æ–µ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
				else:
					kb = InlineKeyboardMarkup()
					grp = c_u.execute('select groups from Event where namee=? and summ=? and datee=? and org=?', (mer, summ, dat, org)).fetchone()[0]
					paid = InlineKeyboardButton(text = '–û–ø–ª–∞—á–µ–Ω–æ', callback_data = f'paiid_{grp}')
					await bot.send_message(chat_id = callback_query.from_user.id,
										   text = f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {regist_parents[2] + " " + regist_parents[3]}üëã!\n'
												  f'–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ "{mer}", –ø—Ä–æ—Ö–æ–¥—è—â–µ–µ {dat}üóì\n'
												  f'–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏: {org}\n\n'
												  f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å—É–º–º–æ–π –≤ —Ä–∞–∑–º–µ—Ä–µ {summ}, –ø–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º "–û–ø–ª–∞—á–µ–Ω–æüí∏", –∞ –∑–∞—Ç–µ–º –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã!',
										   reply_markup = kb.add(paid))
					await callback_query.answer('–ó–∞–ø–∏—Å–∞–ª —Ç–µ–±—è –Ω–∞ –¥–∞–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ')
			# –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
			except aiogram.utils.exceptions.CantInitiateConversation:
				await callback_query.answer(text = '–Ø –Ω–µ –º–æ–≥—É —Ç–µ–±–µ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–µ—Ä–≤—ã–º, –∞–∫—Ç–∏–≤–∏—Ä—É–π –º–µ–Ω—è!')
	# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É —É—á–∞—Å—Ç–≤–æ–≤–∞—é
	else:
		if c_u.execute(f'select particip from active_events where tgID=? and namee=? and datee=? and groups=? and org=? and summ=?',(callback_query.from_user.id, mer, dat, gr, org, summ)).fetchone()[0] == 'False':
			await callback_query.answer('–ó–∞–ø–∏—Å–∞–ª —Ç–µ–±—è –Ω–∞ –¥–∞–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ')
			c_u.execute(f'update active_events set particip=? where tgID=? and namee=? and datee=? and groups=? and org=? and summ=?',('True', callback_query.from_user.id, mer, dat, gr, org, summ))
			conn_u.commit()
		else:
			await callback_query.answer(text = '–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –¥–∞–Ω–Ω–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏!üòÅ')

# –ù–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —É—á–∞—Å—Ç–∏–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
@dp.callback_query_handler(lambda call: call.data == '–ù–µ —É—á–∞—Å—Ç–≤—É—é')
async def participation(callback_query: types.CallbackQuery, state: FSMContext):
	mer = callback_query.message.text.split('\n')[1].split(': ')[1]
	summ = callback_query.message.text.split('\n')[3].split(': ')[1]
	dat = callback_query.message.text.split('\n')[0].split(': ')[1]
	org = callback_query.message.text.split('\n')[2].split(': ')[1]

	# –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º
	if callback_query.message.chat.type == "private":
		gr1 = c_u.execute('select groups from Event where namee=? and summ=? and datee=? and org=?', (mer, summ, dat, org)).fetchall()
		gr = ''
		# –ø–æ–∏—Å–∫ –≤–µ—Ä–Ω–æ–π –≥—Ä—É–ø–ø—ã(–Ω–µ –±–µ—Å–µ–¥—ã)
		for i in gr1:
			adm = c_u.execute('select tgID from admins where groups=?', (i[0],)).fetchone()[0]
			if c_u.execute('select groups from Event where namee=? and datee=? and summ=? and org=? and tgID=?', (mer, dat, summ, org, adm)).fetchone()[0] == i[0]:
				gr = i[0]  # –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –Ω—É–∂–Ω–æ–π –≥—Ä—É–ø–ø—ã(–Ω–µ –±–µ—Å–µ–¥—ã)
				break
		exist_parents_in_active_events = c_u.execute('select * from active_events where groups=? and namee=? and datee=? and tgID=?',(gr, mer, dat, callback_query.from_user.id)).fetchone()
		regist_parents = c_u.execute('select * from parents where tgID=?', (callback_query.from_user.id,)).fetchone()
	# —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–µ—Å–µ–¥–∞—Ö
	else:
		gr = c_u.execute('select groups from Event where namee=? and summ=? and datee=? and org=?', (mer, summ, dat, org)).fetchone()[0]
		exist_parents_in_active_events = c_u.execute('select * from active_events where groups=? and namee=? and datee=? and tgID=? and org=?',(gr, mer, dat, callback_query.from_user.id, org)).fetchone()
		regist_parents = c_u.execute('select * from parents where tgID=?', (callback_query.from_user.id,)).fetchone()
	# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∂–∏–º–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É —É—á–∞—Å—Ç–≤–æ–≤–∞—é
	if exist_parents_in_active_events is None:
		# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –≤ –±–æ—Ç–µ
		if regist_parents[2] == 'None':
			await callback_query.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤–æ –º–Ω–µ!')
		# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ
		else:
			# –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
			if int(summ) == 0:
				c_u.execute('insert into active_events '
							'(groups, tgID, namee, datee, parent, particip, paid, org, summ)'
							'values ("{}", {}, "{}", "{}", "{}", "{}", "{}", "{}", {})'
							''.format(gr, callback_query.from_user.id, mer, dat,
									  regist_parents[2] + ' ' + regist_parents[3], 'False', 'False', org, summ))
				conn_u.commit()
			# –ø–ª–∞—Ç–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
			else:
				c_u.execute('insert into active_events '
							'(groups, tgID, namee, datee, parent, particip, paid, org, summ)'
							'values ("{}", {}, "{}", "{}", "{}", "{}", "{}", "{}", {})'
							''.format(gr, callback_query.from_user.id, mer, dat,
									  regist_parents[2] + ' ' + regist_parents[3], 'False', 'False', org, summ))
				conn_u.commit()
	# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—é
	else:
		if c_u.execute(f'select particip from active_events where tgID=? and namee=? and datee=? and groups=? and org=? and summ=?', (callback_query.from_user.id, mer, dat, gr, org, summ)).fetchone()[0] == 'True':
			await callback_query.answer('–£–±—Ä–∞–ª –≤–∞—Å –∏–∑ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö.')
			c_u.execute(f'update active_events set particip=? where tgID=? and namee=? and datee=? and groups=? and org=? and summ=?', ('False', callback_query.from_user.id, mer, dat, gr, org, summ))
			conn_u.commit()
		else:
			await callback_query.answer(text = '–í—ã —É–∂–µ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –¥–∞–Ω–Ω–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏!üòî')

# –ó–∞—Ö–≤–∞—Ç —Å–∫—Ä–∏–Ω–∞-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@dp.callback_query_handler(lambda call: 'paiid_' in call.data)
async def paid_mer(callback_query: types.CallbackQuery, state: FSMContext):
	txt = callback_query.message.text
	await state.set_state(UploadPhotoForm.grps)
	await state.update_data(grpss = callback_query.data.split('paiid_')[1])
	await state.set_state(UploadPhotoForm.mer)
	await state.update_data(namee_mer = txt.split('–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ "')[1].split('", –ø—Ä–æ—Ö–æ–¥—è—â–µ–µ ')[0])
	await state.set_state(UploadPhotoForm.dat)
	await state.update_data(datee_mer = txt.split(' –ø—Ä–æ—Ö–æ–¥—è—â–µ–µ ')[1].split('üóì')[0])
	await state.set_state(UploadPhotoForm.summ)
	await state.update_data(summ_mer = txt.split(' –≤ —Ä–∞–∑–º–µ—Ä–µ ')[1].split(', ')[0])
	await state.set_state(UploadPhotoForm.org)
	await state.update_data(org_mer = txt.split('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏: ')[1].split('\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å—É–º–º–æ–π –≤ —Ä–∞–∑–º–µ—Ä–µ ')[0])
	await callback_query.answer('–ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫—Ä–∏–Ω-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ')
	await bot.send_message(chat_id = callback_query.from_user.id, text = '–ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫—Ä–∏–Ω-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ')
	await state.set_state(UploadPhotoForm.photo)

# –ü–µ—Ä–µ—Å—Å—ã–ª–∫–∞ –∞–¥–º–∏–Ω–∞–º
@dp.message_handler(content_types=['photo', 'text'], state=UploadPhotoForm.photo)
async def process_photo(message: types.Message, state: FSMContext):
	if message.content_type == 'photo':
		user_data = await state.get_data()
		await state.finish()

		temp_fio = c_u.execute('SELECT * FROM parents WHERE tgID=?', (message.from_user.id, )).fetchone()
		name_group = user_data['grpss']
		admins = c_u.execute('SELECT * FROM admins where groups=?', (name_group, )).fetchall()

		FIO = f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {user_data['namee_mer']}\n–î–∞—Ç–∞: {user_data['datee_mer']}\n–°—É–º–º–∞: {user_data['summ_mer']}\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {user_data['org_mer']}\n–û–ø–ª–∞—Ç–∏–≤—à–∏–π: " + temp_fio[2] + ' ' + temp_fio[3] + f'\nUsername: {temp_fio[7]}'
		for ad in admins:
			await bot.send_photo(chat_id = ad[1], photo = message.photo[0].file_id, caption = FIO)
		await state.finish()
		c_u.execute('UPDATE active_events SET paid=? WHERE tgID=? and namee=? and datee=? and org=? and summ=? and groups=?',
					('True', message.from_user.id, user_data['namee_mer'], user_data['datee_mer'], user_data['org_mer'], user_data['summ_mer'], name_group))
		conn_u.commit()
		await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã!\n–î–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!")

	else:
		await message.answer('–°–∫—Ä–∏–Ω–∞-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –∑–∞–º–µ—á–µ–Ω–æ, –ø—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫—Ä–∏–Ω-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!')

# –í—ã–≤–æ–¥ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏–∑ –ë–î
@dp.message_handler(commands = ['events']) # and message.chat.type == 'private'
async def all_events_command(message: types.Message):
	kb = InlineKeyboardMarkup()
	exit = InlineKeyboardButton(text = '–ó–∞–∫—Ä—ã—Ç—å', callback_data = 'exit')
	my_ev = InlineKeyboardButton(text = '–ú–æ–∏ —Å–æ–±—ã—Ç–∏—è', callback_data = 'myevents')
	profile = InlineKeyboardButton(text = '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data = 'back_to_profile')

	gr = set(c_u.execute('select groups from parents where tgID=?', (message.from_user.id,)).fetchall())

	mers = []
	for grp in gr:

		ev = c_u.execute('SELECT * FROM Event where groups = ? ', (grp[0],)).fetchall()
		for e in ev:
			mers.append(e)
	out = ""
	cnt = 1
	flag = False
	for e in mers:
		if len(e) == 0:
			flag = True
			break
		kb.add(InlineKeyboardButton(text = f'{e[2]}', callback_data = f'{e[6]}'))
		out += f"{cnt} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:\n\t\t–î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {e[1]}\n\t\t–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {e[2]}\n\t\t–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {e[3]}\n\t\t–°—É–º–º–∞ —Å –∫–∞–∂–¥–æ–≥–æ: {e[4]}\n\n"
		cnt += 1

	if flag:
		await message.answer(text = '–ü–æ–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç, –Ω–æ —Å–∫–æ—Ä–æ –æ–Ω–∏ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è!', reply_markup = kb.add(profile).add(exit))
	else:
		await message.answer(out, reply_markup = kb.add(profile, my_ev).add(exit))

# –ú–æ–∏ –∏–≤–µ–Ω—Ç—ã - –∏–≤–µ–Ω—Ç—ã –≤ –∫–æ—Ç–æ—Ä—ã—Ö —è —É—á–∞—Å—Ç–≤—É—é
@dp.message_handler(lambda message: message.text.lower() == '/myevents' and message.chat.type == 'private')
async def my_events_command(message: types.Message):

	kb = InlineKeyboardMarkup()
	exit = InlineKeyboardButton(text = '–ó–∞–∫—Ä—ã—Ç—å', callback_data = 'exit')
	profile = InlineKeyboardButton(text = '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data = 'back_to_profile')
	all_ev = InlineKeyboardButton(text = '–í—Å–µ —Å–æ–±—ã—Ç–∏—è', callback_data = 'allevents')
	my_ev = []

	try:
		gr = c_u.execute('select groups from parents where tgID=?', (message.from_user.id, )).fetchone()[0]
	except:
		await message.answer('–ù–µ –Ω–∞—à–µ–ª –≤–∞—Å –≤ —Å–ø–∏—Å–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
		return 0

	try:
		my_ev_temp = [x[0] for x in c_u.execute('select namee from active_events where tgID=? and groups=? and particip=?', (message.from_user.id, gr, 'True')).fetchall()]
		for i in my_ev_temp:
			appended = c_u.execute('select * from Event where groups=? and namee=?', (gr, i)).fetchone()
			my_ev.append(appended)
		out = "–í–ê–®–ò –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø:\n\n"
		cnt = 1
		for e in my_ev:
			kb.add(InlineKeyboardButton(text = f'{e[2]}', callback_data = f'my_{e[6]}'))
			if c_u.execute('select paid from active_events where tgID=? and groups=? and particip=? and namee=? and datee=? and org=? and summ=?', (message.from_user.id, gr, 'True', e[2], e[1], e[3], e[4])).fetchone()[0] == 'True':
				out += f"{cnt} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ - –û–ø–ª–∞—á–µ–Ω–æ‚úÖ:\n\t\t1Ô∏è‚É£–î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {e[1]}\n\t\t2Ô∏è‚É£–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {e[2]}\n\t\t3Ô∏è‚É£–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {e[3]}\n\t\t4Ô∏è‚É£–°—É–º–º–∞ —Å –∫–∞–∂–¥–æ–≥–æ: {e[4]}\n\n"
			elif c_u.execute('select paid from active_events where tgID=? and groups=? and particip=? and namee=? and datee=? and org=? and summ=?', (message.from_user.id, gr, 'True', e[2], e[1], e[3], e[4])).fetchone()[0] == 'False':
				out += f"{cnt} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ - –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ‚ùå:\n\t\t1Ô∏è‚É£–î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {e[1]}\n\t\t2Ô∏è‚É£–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {e[2]}\n\t\t3Ô∏è‚É£–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {e[3]}\n\t\t4Ô∏è‚É£–°—É–º–º–∞ —Å –∫–∞–∂–¥–æ–≥–æ: {e[4]}\n\n"
			cnt += 1
		await message.answer(out, reply_markup = kb.add(profile, all_ev).add(exit))
	except aiogram.utils.exceptions.MessageTextIsEmpty:

		await message.answer('–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.', reply_markup = kb.add(profile, all_ev).add(exit))
		return 0

# –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å
@dp.message_handler(lambda message: message.text.lower() == '/profile' and message.chat.type == 'private')
async def profile(message: types.Message):

	try:
		F = c_u.execute('select last_name from parents where tgID=?', (message.from_user.id,)).fetchone()[0]
	except:
		F = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
	try:
		I = c_u.execute('select first_name from parents where tgID=?', (message.from_user.id,)).fetchone()[0]
	except:
		I = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'

	gr = set(c_u.execute('select groups from active_events where tgID=?', (message.from_user.id,)).fetchall())
	kb = InlineKeyboardMarkup()
	exit = InlineKeyboardButton(text = '–ó–∞–∫—Ä—ã—Ç—å', callback_data = 'exit')
	my_ev = InlineKeyboardButton(text = '–ú–æ–∏ —Å–æ–±—ã—Ç–∏—è', callback_data = 'myevents')
	all_ev = InlineKeyboardButton(text = '–í—Å–µ —Å–æ–±—ã—Ç–∏—è', callback_data = 'allevents')
	change_FIO = InlineKeyboardButton(text = '–°–º–µ–Ω–∏—Ç—å –§–∞–º–∏–ª–∏—é –∏/–∏–ª–∏ –ò–º—è', callback_data = 'Ready_for_register')
	ln = 0
	for g in gr:
		ln += len(c_u.execute('select * from Event where groups=?', (g[0], )).fetchall())

	await message.answer(f'–§–∞–º–∏–ª–∏—è: {F}\n'
						 f'–ò–º—è: {I}\n' 
						 f'Username: @{message.from_user.username}\n'
						 f'==========\n'
						 f'–ö–æ–ª-–≤–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –≥–¥–µ –≤—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ: {len(c_u.execute("select * from active_events where tgID=? and particip=?", (message.from_user.id, "True")).fetchall())}\n'
						 f'–ö–æ–ª-–≤–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–º: {ln}\n'
						 f'‚úÖ–û–ø–ª–∞—á–µ–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ: {len(c_u.execute("select * from active_events where tgID=? and paid=?", (message.from_user.id, "True")).fetchall())}\n'
						 f'‚ùå–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ: {len(c_u.execute("select * from active_events where tgID=? and paid=?", (message.from_user.id, "False")).fetchall())}', reply_markup = kb.add(my_ev, all_ev).add(change_FIO).add(exit))

# –≤—ã–≤–æ–¥ –º–æ–∏—Ö —Å–æ–±—ã—Ç–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ—Ñ–∏–ª—å
@dp.callback_query_handler(lambda call: call.data == 'myevents')
async def ready_for_register(callback_query: types.CallbackQuery):
	kb = InlineKeyboardMarkup()
	exit = InlineKeyboardButton(text = '–ó–∞–∫—Ä—ã—Ç—å', callback_data = 'exit')
	bck = InlineKeyboardButton(text = '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data = 'back_to_profile')
	all_ev = InlineKeyboardButton(text = '–í—Å–µ —Å–æ–±—ã—Ç–∏—è', callback_data = 'allevents')
	my_ev = []

	try:
		gr = set(c_u.execute('select groups from active_events where tgID=?', (callback_query.from_user.id,)).fetchall())
	except:
		await callback_query.message.edit_text(text = '–ù–µ –Ω–∞—à–µ–ª –≤–∞—Å –≤ —Å–ø–∏—Å–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', reply_markup = kb.add(bck).add(exit))
		return 0


	my_ev_temp = [x[0] for x in c_u.execute('select namee from active_events where tgID=? and particip=?', (callback_query.from_user.id, 'True')).fetchall()]
	for j in gr:
		for i in my_ev_temp:

			appended = c_u.execute('select * from Event where groups=? and namee=?', (j[0], i)).fetchone()
			if appended is None:
				continue
			my_ev.append(appended)

	out = "–í–ê–®–ò –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø:\n\n"
	cnt = 1

	for e in my_ev:

		kb.add(InlineKeyboardButton(text = f'{e[2]}', callback_data = f'my_{e[6]}'))

		if c_u.execute('select paid from active_events where tgID=? and particip=? and namee=? and datee=? and org=? and summ=?', (callback_query.from_user.id, 'True', e[2], e[1], e[3], e[4])).fetchone()[0] == 'True':
			out += f"{cnt} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ - –û–ø–ª–∞—á–µ–Ω–æ‚úÖ:\n\t\t1Ô∏è‚É£–î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {e[1]}\n\t\t2Ô∏è‚É£–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {e[2]}\n\t\t3Ô∏è‚É£–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {e[3]}\n\t\t4Ô∏è‚É£–°—É–º–º–∞ —Å –∫–∞–∂–¥–æ–≥–æ: {e[4]}\n\n"
		elif c_u.execute('select paid from active_events where tgID=? and particip=? and namee=? and datee=? and org=? and summ=?', (callback_query.from_user.id, 'True', e[2], e[1], e[3], e[4])).fetchone()[0] == 'False':
			out += f"{cnt} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ - –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ‚ùå:\n\t\t1Ô∏è‚É£–î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {e[1]}\n\t\t2Ô∏è‚É£–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {e[2]}\n\t\t3Ô∏è‚É£–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {e[3]}\n\t\t4Ô∏è‚É£–°—É–º–º–∞ —Å –∫–∞–∂–¥–æ–≥–æ: {e[4]}\n\n"
		cnt += 1



	if out == "–í–ê–®–ò –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø:\n\n":
		await callback_query.message.edit_text(text = '–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.', reply_markup = kb.add(all_ev).add(bck, exit))
	else:
		await callback_query.message.edit_text(text = out, reply_markup = kb.add(bck, all_ev).add( exit))

# –≤—ã–≤–æ–¥ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π —á–µ—Ä–µ–∑ –ø—Ä–æ—Ñ–∏–ª—å
@dp.callback_query_handler(lambda call: call.data == 'allevents')
async def ready_for_register(callback_query: types.CallbackQuery):
	kb = InlineKeyboardMarkup()
	exit = InlineKeyboardButton(text = '–ó–∞–∫—Ä—ã—Ç—å', callback_data = 'exit')
	bck = InlineKeyboardButton(text = "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data = 'back_to_profile')
	my_ev = InlineKeyboardButton(text = '–ú–æ–∏ —Å–æ–±—ã—Ç–∏—è', callback_data = 'myevents')
	gr = set(c_u.execute('select groups from parents where tgID=?', (callback_query.from_user.id,)).fetchall())

	mers = []
	for grp in gr:
		ev = c_u.execute('SELECT * FROM Event where groups = ? ', (grp[0],)).fetchall()
		for e in ev:

			mers.append(e)
	out = "–í–°–ï –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø:\n\n"
	cnt = 1
	for e in mers:
		kb.add(InlineKeyboardButton(text = f'{e[2]}', callback_data = f'{e[6]}'))
		out += f"{cnt} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:\n\t\t1Ô∏è‚É£–î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {e[1]}\n\t\t2Ô∏è‚É£–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {e[2]}\n\t\t3Ô∏è‚É£–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {e[3]}\n\t\t4Ô∏è‚É£–°—É–º–º–∞ —Å –∫–∞–∂–¥–æ–≥–æ: {e[4]}\n\n"
		cnt += 1
	await callback_query.message.edit_text(out, reply_markup = kb.add(bck, my_ev).add( exit))

# –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø—Ä–æ—Ñ–∏–ª—å
@dp.callback_query_handler(lambda call: call.data == 'back_to_profile')
async def ready_for_register(callback_query: types.CallbackQuery):
	F = c_u.execute('select last_name from parents where tgID=?', (callback_query.from_user.id,)).fetchone()[0]
	I = c_u.execute('select first_name from parents where tgID=?', (callback_query.from_user.id,)).fetchone()[0]
	gr = set(c_u.execute('select groups from active_events where tgID=?', (callback_query.from_user.id,)).fetchall())
	kb = InlineKeyboardMarkup()
	exit = InlineKeyboardButton(text = '–ó–∞–∫—Ä—ã—Ç—å', callback_data = 'exit')
	my_ev = InlineKeyboardButton(text = '–ú–æ–∏ —Å–æ–±—ã—Ç–∏—è', callback_data = 'myevents')
	all_ev = InlineKeyboardButton(text = '–í—Å–µ —Å–æ–±—ã—Ç–∏—è', callback_data = 'allevents')
	change_FIO = InlineKeyboardButton(text = '–°–º–µ–Ω–∏—Ç—å –§–∞–º–∏–ª–∏—é –∏/–∏–ª–∏ –ò–º—è', callback_data = 'Ready_for_register')
	ln = 0
	for g in gr:
		ln += len(c_u.execute('select * from Event where groups=?', (g[0],)).fetchall())

	await callback_query.message.edit_text(f'–§–∞–º–∏–ª–∏—è: {F}\n'
						 f'–ò–º—è: {I}\n'
						 f'Username: @{callback_query.from_user.username}\n'
						 f'==========\n'
						 f'–ö–æ–ª-–≤–æ —Å–æ–±—ã—Ç–∏–π, –≥–¥–µ –≤—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ: {len(c_u.execute("select * from active_events where tgID=? and particip=?", (callback_query.from_user.id, "True")).fetchall())}\n'
						 f'–ö–æ–ª-–≤–æ —Å–æ–±—ã—Ç–∏–π, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–º: {ln}\n'
						 f'‚úÖ–û–ø–ª–∞—á–µ–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ: {len(c_u.execute("select * from active_events where tgID=? and paid=?", (callback_query.from_user.id, "True")).fetchall())}\n'
						 f'‚ùå–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ: {len(c_u.execute("select * from active_events where tgID=? and paid=?", (callback_query.from_user.id, "False")).fetchall())}',
						 reply_markup = kb.add(my_ev, all_ev).add(change_FIO).add(exit))

# –í—ã—Ö–æ–¥ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.callback_query_handler(lambda call: call.data == 'exit')
async def exit(callback_query: types.CallbackQuery):
	await callback_query.answer('–ó–∞–∫—Ä—ã–≤–∞—é.')
	asyncio.create_task(delete_message(callback_query.message, 0))

# –í—ã–≤–æ–¥ –∫–∞–∫–æ–≥–æ —Ç–æ "–º–æ–µ–≥–æ" –∏–≤–µ–Ω—Ç–∞
@dp.callback_query_handler(lambda call: call.data in ['my_'+x[0] for x in c_u.execute('select eventID from Event').fetchall()])
async def react_ev(callback_query: types.CallbackQuery, state: FSMContext):
	await callback_query.answer('–ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏...')

	if c_u.execute('select * from admins where tgID=?', (callback_query.from_user.id, )).fetchone() is not None:
		kb = InlineKeyboardMarkup()
		exit = InlineKeyboardButton(text = '–ó–∞–∫—Ä—ã—Ç—å', callback_data = 'exit')
		bck = InlineKeyboardButton(text = '–ú–æ–∏ —Å–æ–±—ã—Ç–∏—è', callback_data = 'back_my_ev')
		all_ev = InlineKeyboardButton(text = '–í—Å–µ —Å–æ–±—ã—Ç–∏—è', callback_data = 'allevents')
		ras = InlineKeyboardButton(text = '–†–∞–∑–æ—Å–ª–∞—Ç—å', callback_data = '—Ö–æ—á—É_—Ä–∞–∑–æ—Å–ª–∞—Ç—å')
		uch = InlineKeyboardButton(text = '–£—á–∞—Å—Ç–≤—É—é', callback_data = '–£—á–∞—Å—Ç–≤—É—é')
		neuch = InlineKeyboardButton(text = '–ù–µ —É—á–∞—Å—Ç–≤—É—é', callback_data = '–ù–µ —É—á–∞—Å—Ç–≤—É—é')
		spisok = InlineKeyboardButton(text = '–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', callback_data = '–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤')
		change = InlineKeyboardButton(text = '–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ(–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)', callback_data = '–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ')
		remove = InlineKeyboardButton(text = '–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ(–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)', callback_data = '–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ')
		gr = c_u.execute('select groups from admins where tgID=?', (callback_query.from_user.id,)).fetchone()[0]
		q = c_u.execute(f'select * from Event where eventID=?', (callback_query.data.replace('my_', '', 1),)).fetchone()
		pad = c_u.execute('select paid from active_events where tgID=? and namee=? '
						  'and datee=? and org=? and summ=?',
						  (callback_query.from_user.id, q[2], q[1], q[3], q[4])).fetchone()[0]
		grp = c_u.execute('select groups from Event where eventID=?',
						  (callback_query.data.replace('my_', '', 1),)).fetchone()[0]

		paid = InlineKeyboardButton(text = '–û–ø–ª–∞—Ç–∏—Ç—å', callback_data = f'paid_myev_{grp}')
		if pad == 'True':
			await callback_query.message.edit_text(text = f"1Ô∏è‚É£–î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {q[1]}\n"
														f"2Ô∏è‚É£–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {q[2]}\n"
														f"3Ô∏è‚É£–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {q[3]}\n"
														f"4Ô∏è‚É£–°—É–º–º–∞ —Å –∫–∞–∂–¥–æ–≥–æ: {q[4]}\n"
														f"5Ô∏è‚É£–°—Ç–∞—Ç—É—Å: –û–ø–ª–∞—á–µ–Ω–æ‚úÖ", reply_markup = kb.add(ras,spisok).add(uch, neuch).add(bck, all_ev).add(exit))
		else:

			await callback_query.message.edit_text(text = f"1Ô∏è‚É£–î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {q[1]}\n"
														  f"2Ô∏è‚É£–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {q[2]}\n"
														  f"3Ô∏è‚É£–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {q[3]}\n"
														  f"4Ô∏è‚É£–°—É–º–º–∞ —Å –∫–∞–∂–¥–æ–≥–æ: {q[4]}\n"
														  f"5Ô∏è‚É£–°—Ç–∞—Ç—É—Å: –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ‚ùå",
												   reply_markup = kb.add(uch, neuch).add(spisok, paid).add(bck, all_ev).add(exit))

	else:
		kb = InlineKeyboardMarkup()
		exit = InlineKeyboardButton(text = '–ó–∞–∫—Ä—ã—Ç—å', callback_data = 'exit')
		bck = InlineKeyboardButton(text = '–ú–æ–∏ —Å–æ–±—ã—Ç–∏—è', callback_data = 'back_my_ev')
		all_ev = InlineKeyboardButton(text = '–í—Å–µ —Å–æ–±—ã—Ç–∏—è', callback_data = 'allevents')
		uch = InlineKeyboardButton(text = '–£—á–∞—Å—Ç–≤—É—é', callback_data = '–£—á–∞—Å—Ç–≤—É—é')
		neuch = InlineKeyboardButton(text = '–ù–µ —É—á–∞—Å—Ç–≤—É—é', callback_data = '–ù–µ —É—á–∞—Å—Ç–≤—É—é')
		spisok = InlineKeyboardButton(text = '–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', callback_data = '–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤')
		q = c_u.execute(f'select * from Event where eventID=?', (callback_query.data.replace('my_', '', 1),)).fetchone()
		gr = c_u.execute('select groups from parents where tgID=?', (callback_query.from_user.id,)).fetchone()[0]
		pad = c_u.execute('select paid from active_events where tgID=? and namee=? '
						  'and datee=? and org=? and summ=?', (callback_query.from_user.id, q[2], q[1], q[3], q[4])).fetchone()[0]
		grp = c_u.execute('select groups from Event where eventID=?',
						  (callback_query.data.replace('my_', '', 1),)).fetchone()[0]

		paid = InlineKeyboardButton(text = '–û–ø–ª–∞—Ç–∏—Ç—å', callback_data = f'paid_myev_{grp}')
		if pad == 'True':
			await callback_query.message.edit_text(text = f"1Ô∏è‚É£–î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {q[1]}\n"
														  f"2Ô∏è‚É£–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {q[2]}\n"
														  f"3Ô∏è‚É£–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {q[3]}\n"
														  f"4Ô∏è‚É£–°—É–º–º–∞ —Å –∫–∞–∂–¥–æ–≥–æ: {q[4]}\n"
														  f"5Ô∏è‚É£–°—Ç–∞—Ç—É—Å: –û–ø–ª–∞—á–µ–Ω–æ‚úÖ",
												   reply_markup = kb.add(uch, neuch).add(spisok).add(bck, all_ev).add(exit))
		else:

			await callback_query.message.edit_text(text = f"1Ô∏è‚É£–î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {q[1]}\n"
														  f"2Ô∏è‚É£–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {q[2]}\n"
														  f"3Ô∏è‚É£–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {q[3]}\n"
														  f"4Ô∏è‚É£–°—É–º–º–∞ —Å –∫–∞–∂–¥–æ–≥–æ: {q[4]}\n"
														  f"5Ô∏è‚É£–°—Ç–∞—Ç—É—Å: –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ‚ùå",
												   reply_markup = kb.add(uch, neuch).add(spisok, paid).add(bck, all_ev).add(exit))

@dp.callback_query_handler(lambda call: 'paid_myev_' in call.data)
async def paid_mer(callback_query: types.CallbackQuery, state: FSMContext):
	txt = callback_query.message.text
	await state.set_state(UploadPhotoForm.grps)
	await state.update_data(grpss = callback_query.data.split('paid_myev_')[1])
	await state.set_state(UploadPhotoForm.mer)
	await state.update_data(namee_mer = txt.split('\n')[1].split(': ')[1])
	await state.set_state(UploadPhotoForm.dat)
	await state.update_data(datee_mer = txt.split('\n')[0].split(': ')[1])
	await state.set_state(UploadPhotoForm.summ)
	await state.update_data(summ_mer = txt.split('\n')[3].split(': ')[1])
	await state.set_state(UploadPhotoForm.org)
	await state.update_data(org_mer = txt.split('\n')[2].split(': ')[1])
	await callback_query.answer('–ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫—Ä–∏–Ω-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ')
	await bot.send_message(chat_id = callback_query.from_user.id, text = '–ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫—Ä–∏–Ω-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ')
	await state.set_state(UploadPhotoForm.photo)
# –í–æ–∑–≤—Ä–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–∏—Ö –∏–≤–µ–Ω—Ç–æ–≤
@dp.callback_query_handler(lambda call: call.data == 'back_my_ev')
async def spisok_pers(callback_query: types.CallbackQuery):
	kb = InlineKeyboardMarkup()
	exit = InlineKeyboardButton(text = '–ó–∞–∫—Ä—ã—Ç—å', callback_data = 'exit')
	bck = InlineKeyboardButton(text = '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data = 'back_to_profile')
	all_ev = InlineKeyboardButton(text = '–í—Å–µ —Å–æ–±—ã—Ç–∏—è', callback_data = 'allevents')
	my_ev = []

	try:
		gr = set(c_u.execute('select groups from active_events where tgID=?', (callback_query.from_user.id,)).fetchall())
	except:
		await callback_query.message.edit_text(text = '–ù–µ –Ω–∞—à–µ–ª –≤–∞—Å –≤ —Å–ø–∏—Å–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
											   reply_markup = kb.add(bck).add(exit))
		return 0


	my_ev_temp = [x[0] for x in c_u.execute('select namee from active_events where tgID=? and particip=?',
											(callback_query.from_user.id, 'True')).fetchall()]
	for j in gr:
		for i in my_ev_temp:

			appended = c_u.execute('select * from Event where groups=? and namee=?', (j[0], i)).fetchone()
			if appended is None:
				continue
			my_ev.append(appended)

	out = "–í–ê–®–ò –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø:\n\n"
	cnt = 1

	for e in my_ev:
		kb.add(InlineKeyboardButton(text = f'{e[2]}', callback_data = f'my_{e[6]}'))
		if c_u.execute(
				'select paid from active_events where tgID=? and particip=? and namee=? and datee=? and org=? and summ=?',
				(callback_query.from_user.id, 'True', e[2], e[1], e[3], e[4])).fetchone()[0] == 'True':
			out += f"{cnt} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ - –û–ø–ª–∞—á–µ–Ω–æ‚úÖ:\n\t\t1Ô∏è‚É£–î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {e[1]}\n\t\t2Ô∏è‚É£–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {e[2]}\n\t\t3Ô∏è‚É£–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {e[3]}\n\t\t4Ô∏è‚É£–°—É–º–º–∞ —Å –∫–∞–∂–¥–æ–≥–æ: {e[4]}\n\n"
		elif c_u.execute(
				'select paid from active_events where tgID=? and particip=? and namee=? and datee=? and org=? and summ=?',
				(callback_query.from_user.id, 'True', e[2], e[1], e[3], e[4])).fetchone()[0] == 'False':
			out += f"{cnt} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ - –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ‚ùå:\n\t\t1Ô∏è‚É£–î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {e[1]}\n\t\t2Ô∏è‚É£–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {e[2]}\n\t\t3Ô∏è‚É£–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {e[3]}\n\t\t4Ô∏è‚É£–°—É–º–º–∞ —Å –∫–∞–∂–¥–æ–≥–æ: {e[4]}\n\n"
		cnt += 1

	if out == "–í–ê–®–ò –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø:\n\n":
		await callback_query.message.edit_text(text = '–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.', reply_markup = kb.add(all_ev).add(bck, exit))
	else:
		await callback_query.message.edit_text(text = out, reply_markup = kb.add(all_ev).add(bck, exit))

# –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.callback_query_handler(lambda call: call.data in [x[0] for x in c_u.execute('select eventID from Event').fetchall()])
async def react_ev(callback_query: types.CallbackQuery):
	await callback_query.answer('–ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏...')
	q = c_u.execute(f'select * from Event where eventID=?', (callback_query.data,)).fetchone()


	if c_u.execute('select * from admins where tgID=?', (callback_query.from_user.id, )).fetchone() is not None:


		kb = InlineKeyboardMarkup()
		exit = InlineKeyboardButton(text = '–ó–∞–∫—Ä—ã—Ç—å', callback_data = 'exit')
		profile = InlineKeyboardButton(text = '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data = 'back_to_profile')
		all_ev = InlineKeyboardButton(text = '–í—Å–µ —Å–æ–±—ã—Ç–∏—è', callback_data = 'allevents')
		my_ev = InlineKeyboardButton(text = '–ú–æ–∏ —Å–æ–±—ã—Ç–∏—è', callback_data = 'myevents')
		ras = InlineKeyboardButton(text = '–†–∞–∑–æ—Å–ª–∞—Ç—å', callback_data = '—Ö–æ—á—É_—Ä–∞–∑–æ—Å–ª–∞—Ç—å')
		uch = InlineKeyboardButton(text = '–£—á–∞—Å—Ç–≤—É—é', callback_data = '–£—á–∞—Å—Ç–≤—É—é')
		neuch = InlineKeyboardButton(text = '–ù–µ —É—á–∞—Å—Ç–≤—É—é', callback_data = '–ù–µ —É—á–∞—Å—Ç–≤—É—é')
		spisok = InlineKeyboardButton(text = '–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', callback_data = '–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤')
		change = InlineKeyboardButton(text = '–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ(–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)', callback_data = '–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ')
		remove = InlineKeyboardButton(text = '–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ(–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)', callback_data = '–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ')
		await callback_query.message.edit_text(text = f"1Ô∏è‚É£–î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {q[1]}\n"
														  f"2Ô∏è‚É£–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {q[2]}\n"
														  f"3Ô∏è‚É£–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {q[3]}\n"
														  f"4Ô∏è‚É£–°—É–º–º–∞ —Å –∫–∞–∂–¥–æ–≥–æ: {q[4]}\n"
														  , reply_markup = kb.add(ras,spisok).add(uch, neuch).add(my_ev, all_ev).add(profile).add(exit))
	else:


		kb = InlineKeyboardMarkup()
		uch = InlineKeyboardButton(text = '–£—á–∞—Å—Ç–≤—É—é', callback_data = '–£—á–∞—Å—Ç–≤—É—é')
		neuch = InlineKeyboardButton(text = '–ù–µ —É—á–∞—Å—Ç–≤—É—é', callback_data = '–ù–µ —É—á–∞—Å—Ç–≤—É—é')
		exit = InlineKeyboardButton(text = '–ó–∞–∫—Ä—ã—Ç—å', callback_data = 'exit')
		profile = InlineKeyboardButton(text = '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data = 'back_to_profile')
		all_ev = InlineKeyboardButton(text = '–í—Å–µ —Å–æ–±—ã—Ç–∏—è', callback_data = 'allevents')
		my_ev = InlineKeyboardButton(text = '–ú–æ–∏ —Å–æ–±—ã—Ç–∏—è', callback_data = 'myevents')
		spisok = InlineKeyboardButton(text = '–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', callback_data = '–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤')
		await callback_query.message.edit_text(text = f"1Ô∏è‚É£–î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {q[1]}\n"
														  f"2Ô∏è‚É£–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {q[2]}\n"
														  f"3Ô∏è‚É£–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {q[3]}\n"
														  f"4Ô∏è‚É£–°—É–º–º–∞ —Å –∫–∞–∂–¥–æ–≥–æ: {q[4]}\n"
														  ,
											   reply_markup = kb.add(uch, neuch).add(spisok).add(my_ev, all_ev).add(profile).add(exit))

# –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@dp.callback_query_handler(lambda call: call.data == '–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤')
async def spisok_pers(callback_query: types.CallbackQuery):
	await callback_query.answer('–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...')

	kb = InlineKeyboardMarkup()
	exit = InlineKeyboardButton(text = '–ó–∞–∫—Ä—ã—Ç—å', callback_data = 'exit')
	profile = InlineKeyboardButton(text = '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data = 'back_to_profile')
	all_ev = InlineKeyboardButton(text = '–í—Å–µ —Å–æ–±—ã—Ç–∏—è', callback_data = 'allevents')
	my_ev = InlineKeyboardButton(text = '–ú–æ–∏ —Å–æ–±—ã—Ç–∏—è', callback_data = 'myevents')
	await callback_query.answer('–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!')
	dat = callback_query.message.text.split('\n')[0].split(': ')[1]
	mer = callback_query.message.text.split('\n')[1].split(': ')[1]
	org = callback_query.message.text.split('\n')[2].split(': ')[1]
	summ = callback_query.message.text.split('\n')[3].split(': ')[1]
	all_pers = c_u.execute('select * from active_events where namee=? and datee=? and org=? and summ=? and particip=?', (mer, dat, org, summ, 'True')).fetchall()
	out = f'–í –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ "{mer}" —É—á–∞—Å—Ç–≤—É—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ –ª–∏—Ü–∞:\n'
	cnt = 1
	for pers in all_pers:
		if pers [6] == 'True':
			out += f"{cnt}) {pers[4]} - –û–ø–ª–∞—á–µ–Ω–æ‚úÖ\n"
		else:
			out += f"{cnt}) {pers[4]} - –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ‚ùå\n"
		cnt += 1

	if out == f'–í –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ "{mer}" —É—á–∞—Å—Ç–≤—É—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ –ª–∏—Ü–∞:\n':
		await callback_query.message.edit_text(text = '–í –¥–∞–Ω–Ω–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –ø–æ–∫–∞ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫', reply_markup = kb.add(my_ev, all_ev).add(profile).add(exit))
	else:
		await callback_query.message.edit_text(text = out,  reply_markup = kb.add(my_ev, all_ev).add(profile).add(exit))


# –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π - (—Å–æ–æ–±—â–µ–Ω–∏–µ, —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ —É–¥–∞–ª–∏—Ç—å)
async def delete_message(message: types.Message, sleep_time: int = 0):
    await asyncio.sleep(sleep_time)
    with suppress(MessageCantBeDeleted, MessageToDeleteNotFound):
        await message.delete()

@dp.message_handler(lambda message: '/news ' in message.text.lower() and message.chat.type == 'private')
async def profile(message: types.Message):
	try:
		gr = c_u.execute('select groups from admins where tgID=?', (message.from_user.id,)).fetchone()[0]
		data = set(c_u.execute('SELECT groupID FROM parents where groups=? and tgID=?', (gr, message.from_user.id)).fetchall())
		exit = InlineKeyboardButton(text = '–ó–∞–∫—Ä—ã—Ç—å', callback_data = 'exit')
		await message.answer(f'{message.text}', reply_markup = genmarkup(data).add(exit))
		asyncio.create_task(delete_message(message, 0))
	except:
		await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!')

# –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
	executor.start_polling(dp, skip_updates = True)





